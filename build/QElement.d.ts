import { QElementStyle, QElementConfig, QElementMetadata, QElementAnimation } from './types';
import { QElementValidator } from './QElementValidator';
import { QElementThemeManager } from './QElementTheme';
import { QElementResponsiveManager } from './QElementResponsive';
export declare class QElement {
    private _id;
    private _style;
    private _parent;
    private _children;
    private _overrides;
    private _metadata;
    private _animations;
    private _validator;
    private _themeManager;
    private _responsiveManager;
    private _isVisible;
    private _isEnabled;
    constructor(id: string, style?: QElementStyle, metadata?: QElementMetadata, validator?: QElementValidator, themeManager?: QElementThemeManager, responsiveManager?: QElementResponsiveManager);
    get id(): string;
    get style(): QElementStyle;
    get parent(): QElement | null;
    get children(): QElement[];
    get overrides(): QElementStyle;
    get computedStyle(): QElementStyle;
    setParent(parent: QElement): void;
    addChild(child: QElement): void;
    removeChild(child: QElement): void;
    resetOverrides(): void;
    getStyleProperty(property: string): any;
    setStyleProperty(property: string, value: any): void;
    toConfig(): QElementConfig;
    static fromConfig(config: QElementConfig): QElement;
    findById(id: string): QElement | null;
    getAllDescendants(): QElement[];
    clone(): QElement;
    get metadata(): QElementMetadata;
    updateMetadata(metadata: Partial<QElementMetadata>): void;
    get isVisible(): boolean;
    get isEnabled(): boolean;
    setVisible(visible: boolean): void;
    setEnabled(enabled: boolean): void;
    addAnimation(name: string, animation: QElementAnimation): void;
    removeAnimation(name: string): void;
    getAnimation(name: string): QElementAnimation | undefined;
    getAllAnimations(): QElementAnimation[];
    validateStyle(): {
        isValid: boolean;
        errors: string[];
        warnings: string[];
    };
    validateOverrides(): {
        isValid: boolean;
        errors: string[];
        warnings: string[];
    };
    applyTheme(themeName: string): void;
    getCurrentTheme(): string;
    getCurrentBreakpoint(): string;
    createResponsiveStyles(responsiveStyles: {
        [breakpoint: string]: Partial<QElementStyle>;
    }): void;
    mergeStyle(newStyle: Partial<QElementStyle>, deep?: boolean): void;
    private _deepMerge;
    inheritFromParent(properties: string[]): void;
    resetToParent(): void;
    resetToDefault(): void;
    getStyleHash(): string;
    private _hashString;
    private _styleChangeListeners;
    onStyleChange(listener: (element: QElement) => void): () => void;
    private _notifyStyleChange;
    updateStyle(newStyle: Partial<QElementStyle>): void;
    overrideStyle(overrides: Partial<QElementStyle>): void;
}
